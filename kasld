#!/bin/sh
# [ KASLD ] Kernel Address Space Layout Derandomization
# https://github.com/bcoles/kasld
#
# A collection of various techniques to infer the Linux kernel base virtual
# address as an unprivileged local user, for the purpose of bypassing Kernel
# Address Space Layout Randomization (KASLR).
# ---
# 2019 - <bcoles@gmail.com>

base_dir="$(dirname "$(readlink -f "$0")")"
build="${base_dir}/build"

cd "${base_dir}" || exit 1

echo
echo "[ KASLD ] Kernel Address Space Layout Derandomization"
echo

echo "Kernel release:   $(uname -r)"
echo "Kernel version:   $(uname -v)"
echo "Kernel arch:      $(uname -m)"
echo "Kernel platform:  $(uname -i)"
echo
echo "kernel.kptr_restrict:      $(cat /proc/sys/kernel/kptr_restrict)"
echo "kernel.dmesg_restrict:     $(cat /proc/sys/kernel/dmesg_restrict)"
echo "kernel.panic_on_oops:      $(cat /proc/sys/kernel/panic_on_oops)"
echo
echo "Readable /var/log/syslog:  $(test -r /var/log/syslog && echo yes || echo no)"
echo "Readable DebugFS:          $(test -r /sys/kernel/debug && echo yes || echo no)"
echo

echo "Building ..."
echo

make || echo "build failed!"
echo

echo "Running build ..."
echo

if [ -x "${build}/default.o" ]; then
  "${build}/default.o"
  echo
fi

if [ -x "${build}/boot-config.o" ]; then
  "${build}/boot-config.o"
  echo
fi

if [ -x "${build}/cmdline.o" ]; then
  "${build}/cmdline.o"
  echo
fi

if [ -x "${build}/bcm_msg_head_struct.o" ]; then
  "${build}/bcm_msg_head_struct.o"
  echo
fi

if [ -x "${build}/dmesg_android_ion_snapshot.o" ]; then
  "${build}/dmesg_android_ion_snapshot.o"
  echo
fi

if [ -x "${build}/dmesg_backtrace.o" ]; then
  "${build}/dmesg_backtrace.o"
  echo
fi

if [ -x "${build}/dmesg_driver_component_ops.o" ]; then
  "${build}/dmesg_driver_component_ops.o"
  echo
fi

if [ -x "${build}/dmesg_mem_init_kernel_layout.o" ]; then
  "${build}/dmesg_mem_init_kernel_layout.o"
  echo
fi

if [ -x "${build}/dmesg_mmu_idmap.o" ]; then
  "${build}/dmesg_mmu_idmap.o"
  echo
fi

if [ -x "${build}/free_reserved_area_dmesg.o" ]; then
  "${build}/free_reserved_area_dmesg.o"
  echo
fi

if [ -x "${build}/free_reserved_area_syslog.o" ]; then
  "${build}/free_reserved_area_syslog.o"
  echo
fi

if [ -x "${build}/mmap-brute-vmsplit.o" ]; then
  "${build}/mmap-brute-vmsplit.o"
  echo
fi

if [ -x "${build}/perf_event_open.o" ]; then
  "${build}/perf_event_open.o"
  echo
fi

if [ -x "${build}/pppd_kallsyms.o" ]; then
  "${build}/pppd_kallsyms.o"
  echo
fi

if [ -x "${build}/proc-config.o" ]; then
  "${build}/proc-config.o"
  echo
fi

if [ -x "${build}/proc-kallsyms.o" ]; then
  "${build}/proc-kallsyms.o"
  echo
fi

if [ -x "${build}/proc-stat-wchan.o" ]; then
  "${build}/proc-stat-wchan.o"
  echo
fi

if [ -x "${build}/sysfs_iscsi_transport_handle.o" ]; then
  "${build}/sysfs_iscsi_transport_handle.o"
  echo
fi

if [ -x "${build}/sysfs-module-sections.o" ]; then
  "${build}/sysfs-module-sections.o"
  echo
fi

if [ -x "${build}/sysfs_nf_conntrack.o" ]; then
  "${build}/sysfs_nf_conntrack.o"
  echo
fi

# slow - leave last
if [ -x "${build}/mincore.o" ]; then
  "${build}/mincore.o"
  echo
fi
